# Bash/Zsh
export HISTFILE="${XDG_STATE_HOME:-$HOME/.local/state}/bash/history"
export LESSHISTFILE="${XDG_STATE_HOME:-$HOME/.local/state}/less/history"

# Curl
if [ -d "${HOMEBREW_PREFIX}/opt/curl" ]; then
  export PATH="${HOMEBREW_PREFIX}/opt/curl/bin:${PATH}"
fi

# Docker: Does not worked
# export DOCKER_CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/docker"

# Go
export GOPATH="${HOME}/.go"
if [ -x "$(command -v go)" ]; then
  export GOBIN="$(go env GOPATH)/bin"
  export PATH="$(go env GOROOT)/bin:$(go env GOPATH)/bin:${PATH}"
fi

# GPG
export GPG_TTY="$(tty)"

# Java
if [ -d "${HOMEBREW_PREFIX}/opt/openjdk" ]; then
  export PATH="${HOMEBREW_PREFIX}/opt/openjdk/bin:$PATH"
fi

# LLVM
if [ -d "${HOMEBREW_PREFIX}/opt/llvm" ]; then
  export PATH="${HOMEBREW_PREFIX}/opt/llvm/bin:${PATH}"
  export LDFLAGS="-L${HOMEBREW_PREFIX}/opt/llvm/lib ${LDFLAGS}"
  export CPPFLAGS="-I${HOMEBREW_PREFIX}/opt/llvm/include ${CPPFLAGS}"
fi

# MacTex
if [ -d /usr/texbin ]; then
  export PATH="/usr/texbin:${PATH}"
fi

# MySQL client
if [ -d "${HOMEBREW_PREFIX}/opt/mysql-client" ]; then
  export PATH="${HOMEBREW_PREFIX}/opt/mysql-client/bin:${PATH}"
  export LDFLAGS="-L${HOMEBREW_PREFIX}/opt/mysql-client/lib ${LDFLAGS}"
  export CFLAGS="-I${HOMEBREW_PREFIX}/opt/mysql-client/include ${CFLAGS}"
  export CPPFLAGS="-I${HOMEBREW_PREFIX}/opt/mysql-client/include ${CPPFLAGS}"
fi

# Node.js
export NVM_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/nvm"
if [ -s "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh" ]; then
  \. "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh"
fi
if [ -s "${HOMEBREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm" ]; then
  \. "${HOMEBREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm"
fi

export NODE_REPL_HISTORY="${XDG_STATE_HOME:-$HOME/.local/state}/node/repl_history"

if [ -d "${HOMEBREW_PREFIX}/lib/node_modules" ]; then
  export NODE_PATH="${HOMEBREW_PREFIX}/lib/node_modules"
fi

if [ ! -d "$NVM_DIR" ] || [ ! -s "$NVM_DIR/nvm.sh" ]; then
  export NPM_CONFIG_USERCONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/npm/npmrc"
  export NPM_CONFIG_CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/npm"
  export NPM_CONFIG_PREFIX="${XDG_DATA_HOME:-$HOME/.local/share}/npm"
  export PATH="${NPM_CONFIG_PREFIX}/bin:${PATH}"
fi
export PATH="./node_modules/.bin:${PATH}"

# PostgreSQL client
if [ -d "${HOMEBREW_PREFIX}/opt/libpq" ]; then
  export PATH="${HOMEBREW_PREFIX}/opt/libpq/bin:${PATH}"
  export LDFLAGS="-L${HOMEBREW_PREFIX}/opt/libpq/lib ${LDFLAGS}"
  export CPPFLAGS="-I${HOMEBREW_PREFIX}/opt/libpq/include ${CPPFLAGS}"
fi

# Python
export PYTHONHISTFILE="${XDG_STATE_HOME:-$HOME/.local/state}/python/history"
export PYTHONPYCACHEPREFIX="${XDG_CACHE_HOME:-$HOME/.cache}/python"
export MYPY_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/mypy"
export PIP_CONFIG_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/pip/pip.conf"
export PIP_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/pip"
export PIPENV_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/pipenv"

export PATH="./.venv/.bin:${PATH}"
export PYTHONDONTWRITEBYTECODE=1
export PIP_REQUIRE_VIRTUALENV=true
export PIP_RESPECT_VIRTUALENV=true

if [ -d "${HOMEBREW_PREFIX}/opt/openssl" ]; then
  # https://github.com/pycurl/pycurl/issues/526
  export PYCURL_SSL_LIBRARY=openssl
  # https://gist.github.com/andrisasuke/91eccace11366e626d14c5c249054e20
  export SWIG_FEATURES="-cpperraswarn -includeall -I${HOMEBREW_PREFIX}/opt/openssl/include"
fi

# Rancher Desktop
if [ -d "${HOME}/.rd/bin" ]; then
  export PATH="${HOME}/.rd/bin:$PATH"
fi

# Ruby
export BUNDLE_USER_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/bundle"

# Rust
export CARGO_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/cargo"
export RUSTUP_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/rustup"
export CARGO_TARGET_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/cargo/target"
export PATH="${CARGO_HOME}/bin:${PATH}"

if [ -d "${HOMEBREW_PREFIX}/opt/rustup" ]; then
  export PATH="${HOMEBREW_PREFIX}/opt/rustup/bin:${PATH}"
fi

# Terraform
export TF_PLUGIN_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/terraform/plugin-cache"

# The Software Development Kit Manager
if [ -d "${HOMEBREW_PREFIX}/opt/sdkman-cli" ]; then
  export SDKMAN_DIR="$(brew --prefix sdkman-cli)/libexec"
  [[ -s "${SDKMAN_DIR}/bin/sdkman-init.sh" ]] && source "${SDKMAN_DIR}/bin/sdkman-init.sh"
fi

# Visual Studio Code
if [ -d "${HOME}/Library/Application Support/Code" ]; then
  export VSCODE_PORTABLE="${HOME}/Library/Application Support/Code"
else
  export VSCODE_PORTABLE="${XDG_DATA_HOME}/Code"
fi

if [ -d "${HOME}/Library/Application Support/Code/extensions" ]; then
  export VSCODE_EXTENSIONS="${HOME}/Library/Application Support/Code/extensions"
else
  export VSCODE_EXTENSIONS="${XDG_DATA_HOME}/Code/extensions"
fi
export VSCODE_APPDATA="${XDG_DATA_HOME:-$HOME/.local/share}/Code"
export VSCODE_LOGS="${XDG_CACHE_HOME:-$HOME/.cache}/Code/logs"
